(function() {
  var Notifiction, express, io, log;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  log = require("./util").log;
  io = require("socket.io");
  express = require("express");
  Notifiction = (function() {
    function Notifiction(port) {
      this.didReceiveRequest = __bind(this.didReceiveRequest, this);      this.port = port;
    }
    Notifiction.prototype.start = function() {
      this.server = express.createServer();
      this.server.use(express.bodyParser());
      this.server.post('/', this.didReceiveRequest);
      this.server.listen(this.port);
      this.socket = io.listen(this.server);
      return this.socket.sockets.on('connection', this.clientConnected);
    };
    Notifiction.prototype.didReceiveRequest = function(req, res) {
      var data;
      data = JSON.parse(req.body.payload);
      log("Received data: ", data);
      if (data.type == null) {
        return this._endWithError(req, "Received notification without type");
      }
      this.socket.sockets.emit("notification", data);
      res.writeHead(200);
      return res.end("200: Notified");
    };
    Notifiction.prototype.clientConnected = function(socket) {
      return log("Socket client connected");
    };
    Notifiction.prototype._endWithError = function(request, message) {
      res.writeHead(500);
      return res.end("500: " + message);
    };
    return Notifiction;
  })();
  module.exports = Notifiction;
}).call(this);
